name: Deploy

on:
  workflow_dispatch:
    inputs:
      ark_version:
        description: 'ARK version to deploy (e.g. "v0.1.19", blank for latest)'
        required: false
        type: string
        default: ''
      deploy_containers:
        description: 'Deploy multi-arch containers to registry'
        required: false
        type: boolean
        default: false
      deploy_containers_to_latest:
        description: 'Deploy containers to "latest" tag'
        required: false
        type: boolean
        default: false
      deploy_to_distribution_environment:
        description: 'Deploy to distribution environment'
        required: false
        type: boolean
        default: false
      deploy_to_pages:
        description: 'Deploy documentation to GitHub Pages'
        required: false
        type: boolean
        default: false
      deploy_to_npm:
        description: 'Deploy ARK CLI to NPM registry'
        required: false
        type: boolean
        default: false
      deploy_helm_chart:
        description: 'Deploy Helm charts to container registry'
        required: false
        type: boolean
        default: false
      deploy_to_pypi:
        description: 'Deploy Python packages to PyPI registry'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  resolve_version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.resolve.outputs.version }}
      clean_version: ${{ steps.resolve.outputs.clean_version }}
      sha: ${{ steps.resolve.outputs.sha }}
      has_version: ${{ steps.resolve.outputs.has_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve ARK version
        id: resolve
        uses: ./.github/actions/resolve-version
        with:
          ark_version: ${{ github.event.inputs.ark_version }}

  deploy:
    needs: [resolve_version]
    if: ${{ inputs.deploy_containers }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - path: ark
            image: ark-controller
          - path: services/ark-api-a2a
            image: ark-api-a2a
            prebuild: "make ark-api-a2a-deps && mkdir -p services/ark-api-a2a/out && cp out/ark-sdk/py-sdk/dist/ark_sdk-*.whl services/ark-api-a2a/out/"
          - path: services/ark-api
            image: ark-api
            prebuild: "make ark-api-deps && mkdir -p services/ark-api/ark-api/out && cp out/ark-sdk/py-sdk/dist/ark_sdk-*.whl services/ark-api/ark-api/out/"
          - path: services/ark-dashboard
            image: ark-dashboard
            prebuild: "make ark-dashboard-deps"
          - path: services/ark-mcp
            image: ark-mcp
            prebuild: "make ark-mcp-deps && mkdir -p services/ark-mcp/ark-mcp/out && cp out/ark-sdk/py-sdk/dist/ark_sdk-*.whl services/ark-mcp/ark-mcp/out/"
          - path: services/ark-cluster-memory/ark-cluster-memory
            image: ark-cluster-memory
          - path: services/ark-evaluator
            image: ark-evaluator
            prebuild: "make ark-evaluator-deps"
          - path: tools/ark-cli
            image: ark-cli
            prebuild: "make ark-cli-build"
          - path: images/ark-tools
            image: ark-tools
            prebuild: "make ark-cli-build && cp -r tools ark images/ark-tools/"
    steps:
      - name: Validate version tag exists
        run: |
          if [ "${{ needs.resolve_version.outputs.has_version }}" != "true" ]; then
            echo "Error: Version tag is required for container deployment but does not exist"
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.resolve_version.outputs.sha }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Build libraries
        run: make libs-build-all


      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          # Default registry: ghcr.io/mckinsey/agents-at-scale-ark (includes repo name for GHCR access control)
          registry: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch containers
        uses: ./.github/actions/build-image
        with:
          path: ${{ matrix.path }}
          image: ${{ matrix.image }}
          tag: ${{ needs.resolve_version.outputs.clean_version }}
          registry: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}
          platforms: linux/amd64,linux/arm64
          push: true
          prebuild: ${{ matrix.prebuild }}
      
      - name: Push to "latest" tag
        if: ${{ inputs.deploy_containers_to_latest }}
        run: |
          REGISTRY="${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}"
          IMAGE="${{ matrix.image }}"
          VERSION="${{ needs.resolve_version.outputs.clean_version }}"
          
          echo "Tagging and pushing $REGISTRY/$IMAGE:$VERSION as 'latest'"
          docker buildx imagetools create \
            --tag "$REGISTRY/$IMAGE:latest" \
            "$REGISTRY/$IMAGE:$VERSION"

  deploy-to-distribution-environment:
    needs: [resolve_version]
    if: ${{ inputs.deploy_to_distribution_environment }}
    # This is the specific runner which is needed to authenticate to Platform
    # McKinsey for the Ark deployment.
    runs-on: gh-larger-linux-mini
    steps:
      - name: Validate version tag exists
        run: |
          if [ "${{ needs.resolve_version.outputs.has_version }}" != "true" ]; then
            echo "Error: Version tag is required for distribution environment deployment but does not exist"
            exit 1
          fi

      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Validate deployment secrets
        run: |
          [ -z "${{ secrets.DEPLOY_CLUSTER_LOGIN_URL }}" ] && { echo "error: DEPLOY_CLUSTER_LOGIN_URL secret required"; exit 1; }
          [ -z "${{ secrets.DEPLOY_CLUSTER_IDP_ISSUER_URL }}" ] && { echo "error: DEPLOY_CLUSTER_IDP_ISSUER_URL secret required"; exit 1; }

      - name: Setup kubeconfig for Distribution Environment
        uses: ./.github/actions/kubernetes/generate-kubeconfig-using-github-oidc
        with:
          cluster_login_url: ${{ secrets.DEPLOY_CLUSTER_LOGIN_URL }}
          idp_issuer_url: ${{ secrets.DEPLOY_CLUSTER_IDP_ISSUER_URL }}
          kubectl_version: v1.28.0

      - name: Deploy ARK Controller Helm Chart
        uses: ./.github/actions/deploy-ark-helmchart
        with:
          version: ${{ needs.resolve_version.outputs.version }}
          clean_version: ${{ needs.resolve_version.outputs.clean_version }}
          namespace: ark-system
          image_repository: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}/ark-controller
          image_tag: ${{ needs.resolve_version.outputs.clean_version }}
          service_account_name: ark-controller
          container_registry_server: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}
          container_registry_username: ${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }}
          container_registry_password: ${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}
          rbac_enable: "false"
          timeout: "5m"
          install_cert_manager: "false"
          install_gateway_api: "false"
        env:
          GH_TOKEN: ${{ github.token }}

  deploy-helm-charts:
    needs: [resolve_version]
    if: ${{ inputs.deploy_helm_chart }}
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        chart:
          - ark-controller
          - ark-api
          - ark-dashboard
          - ark-mcp
          - localhost-gateway
          - ark-tenant
    steps:
      - name: Validate version tag exists
        run: |
          if [ "${{ needs.resolve_version.outputs.has_version }}" != "true" ]; then
            echo "Error: Version tag is required for Helm chart deployment but does not exist"
            exit 1
          fi

      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'
          
      - name: Download ${{ matrix.chart }} Helm chart from release
        run: |
          VERSION="${{ needs.resolve_version.outputs.version }}"
          CLEAN_VERSION="${{ needs.resolve_version.outputs.clean_version }}"
          
          gh release download "$VERSION" --pattern "${{ matrix.chart }}-${CLEAN_VERSION}.tgz"
          
          ls -la ${{ matrix.chart }}-${CLEAN_VERSION}.tgz
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Deploy ${{ matrix.chart }} to Container Registry
        run: |
          CLEAN_VERSION="${{ needs.resolve_version.outputs.clean_version }}"
          REGISTRY="${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}"
          
          helm registry login $REGISTRY -u "${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }}" --password-stdin <<< "${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}"
          helm push ${{ matrix.chart }}-${CLEAN_VERSION}.tgz oci://${REGISTRY}/charts

  deploy-to-pages:
    needs: [resolve_version]
    if: ${{ inputs.deploy_to_pages }}
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          
      - name: Build Docs
        run: |
          cd docs
          npm ci
          npm run build
        env:
          # Set basePath for GitHub Pages deployment using configurable variable
          NEXT_PUBLIC_BASE_PATH: ${{ vars.DOCS_SITE_BASE_PATH || '' }}
          
      - name: Upload Site Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/out
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-to-npm:
    needs: [resolve_version]
    if: ${{ inputs.deploy_to_npm }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Download ark-cli artifact from release
        run: |
          VERSION="${{ needs.resolve_version.outputs.version }}"
          gh release download "$VERSION" -p "ark-cli.tgz"
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          registry-url: https://registry.npmjs.org/
      
      - name: Publish to npm
        run: |
          npm publish ark-cli.tgz --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-to-pypi:
    needs: [resolve_version]
    if: ${{ inputs.deploy_to_pypi }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Download ARK SDK wheel from release
        run: |
          VERSION="${{ needs.resolve_version.outputs.version }}"
          gh release download "$VERSION" -p "ark_sdk-*.whl" -D dist/
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          attestations: false  # Will enable when organization Trusted Publishing is configured
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          attestations: false  # Will enable when organization Trusted Publishing is configured
